//–î–∞–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏–∑ [0..10^9] —Ä–∞–∑–º–µ—Ä–∞ n.
//–ò—Å–ø–æ–ª—å–∑—É—è –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ k-–æ–π –ø–æ—Ä—è–¥–∫–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–Ω–æ–∂–µ—Å—Ç–≤–∞:
//10%  –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å
//–º–µ–¥–∏–∞–Ω–∞
//90%  –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å
//
//–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏: O(n).
//–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: O(n)
//–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è partition.
//–†–µ–∫—É—Ä—Å–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞.
//–†–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞—á—É —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–Ω–∞—Ä—É–∂–∏.
//
//6_3. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤—ã–±–æ—Ä–∞ –æ–ø–æ—Ä–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ ‚Äú—Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç‚Äù.
//–§—É–Ω–∫—Ü–∏—é Partition —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥–æ–º –ø—Ä–æ—Ö–æ–¥–∞ –¥–≤—É–º—è –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –º–∞—Å—Å–∏–≤–∞ –∫ –∫–æ–Ω—Ü—É.


// –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞—è –ø—Ä–æ—Ö–æ–¥–∞ –æ—Ç –Ω–∞—á–∞–ª–∞ –º–∞—Å—Å–∏–≤–∞ –∫ –∫–æ–Ω—Ü—É:
// –í—ã–±–∏—Ä–∞–µ—Ç—Å—è –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å–ª—É—á–∞–π–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.
// –û–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—è–µ—Ç—Å—è —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –º–∞—Å—Å–∏–≤–∞.
// –í–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã Partition –≤ –Ω–∞—á–∞–ª–µ –º–∞—Å—Å–∏–≤–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–µ –±–æÃÅ–ª—å—à–∏–µ –æ–ø–æ—Ä–Ω–æ–≥–æ.
// –ó–∞—Ç–µ–º —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã, —Å—Ç—Ä–æ–≥–æ –±–û–ª—å—à–∏–µ –æ–ø–æ—Ä–Ω–æ–≥–æ.
// –í –∫–æ–Ω—Ü–µ –º–∞—Å—Å–∏–≤–∞ –ª–µ–∂–∞—Ç –Ω–µ—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
// –ü–æ—Å–ª–µ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –ª–µ–∂–∏—Ç –æ–ø–æ—Ä–Ω—ã–π.
// –ò—Ç–µ—Ä–∞—Ç–æ—Ä (–∏–Ω–¥–µ–∫—Å) i —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ –≥—Ä—É–ø–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å—Ç—Ä–æ–≥–æ –±–æÃÅ–ª—å—à–∏—Ö –æ–ø–æ—Ä–Ω–æ–≥–æ.
// –ò—Ç–µ—Ä–∞—Ç–æ—Ä j –±–æ–ª—å—à–µ i, –∏—Ç–µ—Ä–∞—Ç–æ—Ä j —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –Ω–µ—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.
// –®–∞–≥ –∞–ª–≥–æ—Ä–∏—Ç–º–∞, –ø–æ–∫–∞ j < a.len:
//     –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç j.
//     –ï—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –æ–ø–æ—Ä–Ω–æ–≥–æ,
//         —Ç–æ —Å–¥–≤–∏–≥–∞–µ–º j.
//     –ï—Å–ª–∏ –æ–Ω –Ω–µ –±–æ–ª—å—à–µ –æ–ø–æ—Ä–Ω–æ–≥–æ,
//         —Ç–æ –º–µ–Ω—è–µ–º a[i] –∏ a[j] –º–µ—Å—Ç–∞–º–∏,
//         —Å–¥–≤–∏–≥–∞–µ–º i –∏ —Å–¥–≤–∏–≥–∞–µ–º j.
// –í –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –º–µ–Ω—è–µ–º –æ–ø–æ—Ä–Ω—ã–π –∏ —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä i.

//  0123456789 <= –æ–ø–æ—Ä–Ω–æ–≥–æ < ùü¨ùü≠ùüÆùüØùü∞ùü±ùü≤ùü≥ùü¥ùüµ
//||2 8 7 1 3 5 6|4
// |2|8 7 1 3 5 6|4
//  2|ùü¥|7 1 3 5 6|4
//  2|ùü¥ ùü≥|1 3 5 6|4
//  2 1|ùü≥ ùü¥|3 5 6|4
//  2 1 3|ùü¥ ùü≥|5 6|4
//  2 1 3|ùü¥ ùü≥ ùü±|6|4
//  2 1 3|ùü¥ ùü≥ ùü± ùü≤|4
//  2 1 3 4|ùü≥ ùü± ùü≤ ùü¥|

// –í–≤–æ–¥
// 10 4
// 1 2 3 4 5 6 7 8 9 10
// –í—ã–≤–æ–¥
// 5

// –í–≤–æ–¥
// 10 0
// 3 6 5 7 2 9 8 10 4 1
// –í—ã–≤–æ–¥
// 1

// –í–≤–æ–¥
// 10 9
// 0 0 0 0 0 0 0 0 0 1
// –í—ã–≤–æ–¥
// 1

#include <iostream>
#include <cmath>

template<class T>
struct DefaultComparator {
    bool operator()(const T&l, const T &r) const {
        return l < r;
    }
};

template<class T, class Comparator = DefaultComparator<T>>
size_t partition(T *arr, size_t left, size_t right, Comparator comp = Comparator()) {
    if (left == right - 1) {
        return left;
    }
    size_t pivot_idx = rand() % (right - 1 - left) + left;

    T pivot = arr[pivot_idx];

    size_t i = left;
    size_t j = left;

    std::swap(arr[pivot_idx], arr[right - 1]);
    while (true) {
        for (; comp(arr[i], pivot) ; ++j, ++i);
        for (; !comp(arr[j], pivot) && (j < right - 1); j++);
        if (j == right - 1) {
            break;
        }
        std::swap(arr[j], arr[i]);
    }
    std::swap(arr[right - 1], arr[i]);
    return i;
}

template<class T>
void kth_element(T *arr, size_t size, size_t k) {
    size_t left =  0;
    size_t right = size;

    while (true) {
        int middle = partition(arr, left, right);
        if (middle == k) {
            return;
        } else if (middle < k) {
            left = middle + 1;
        } else {
            right = middle;
        }
    }
}


int main() {
    int n = 0;
    std::cin >> n;

    int *arr = new int[n];
    for (size_t i = 0; i < n; ++i) {
        std::cin >> arr[i];
    }

    auto ten_per = size_t(std::round(n * 0.1));
    kth_element(arr, n, ten_per);
    std::cout << arr[ten_per] << std::endl;

    auto mid_per = size_t(std::round(n * 0.5));
    kth_element(arr, n, mid_per);
    std::cout << arr[mid_per] << std::endl;


    auto nine_per = size_t(std::round(n * 0.9));
    if (n < 6) {   // –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª –Ω–∏—á–µ–≥–æ –ª—É—á—à–µ, —á—Ç–æ–±—ã 90% –Ω–µ –≤—ã–ª–µ–∑–∞–ª–æ –∑–∞ –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –º–∞–ª–µ–Ω—å–∫–∏—Ö n
        nine_per = n - 1;
    }
    kth_element(arr, n, nine_per);
    std::cout << arr[nine_per] << std::endl;

    delete[] arr;

    return 0;
}
